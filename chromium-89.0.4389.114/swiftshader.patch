From 24c700ab79d901c99f000fde50d56707d6372ed6 Mon Sep 17 00:00:00 2001
From: Marcus Comstedt <marcus@mc.pp.se>
Date: Sun, 14 Feb 2021 19:36:38 +0100
Subject: [PATCH 1/2] Add some sources needed on ppc64 to the build

---
 third_party/swiftshader/third_party/llvm-10.0/BUILD.gn | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn b/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn
index 9ab811c288..d91874a500 100644
--- a/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn
+++ b/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn
@@ -577,6 +577,7 @@ swiftshader_llvm_source_set("swiftshader_llvm_most") {
     "llvm/lib/MC/MCAsmBackend.cpp",
     "llvm/lib/MC/MCAsmInfo.cpp",
     "llvm/lib/MC/MCAsmInfoCOFF.cpp",
+    "llvm/lib/MC/MCAsmInfoXCOFF.cpp",
     "llvm/lib/MC/MCAsmInfoDarwin.cpp",
     "llvm/lib/MC/MCAsmInfoELF.cpp",
     "llvm/lib/MC/MCAsmMacro.cpp",
@@ -634,6 +635,7 @@ swiftshader_llvm_source_set("swiftshader_llvm_most") {
     "llvm/lib/MC/MCWinCOFFStreamer.cpp",
     "llvm/lib/MC/MCWinEH.cpp",
     "llvm/lib/MC/MCXCOFFStreamer.cpp",
+    "llvm/lib/MC/MCXCOFFObjectTargetWriter.cpp",
     "llvm/lib/MC/MachObjectWriter.cpp",
     "llvm/lib/MC/StringTableBuilder.cpp",
     "llvm/lib/MC/SubtargetFeature.cpp",
@@ -854,6 +856,7 @@ swiftshader_llvm_source_set("swiftshader_llvm_support") {
     "llvm/lib/Support/ARMAttributeParser.cpp",
     "llvm/lib/Support/ARMBuildAttrs.cpp",
     "llvm/lib/Support/ARMTargetParser.cpp",
+    "llvm/lib/Support/Atomic.cpp",
     "llvm/lib/Support/BinaryStreamError.cpp",
     "llvm/lib/Support/BinaryStreamReader.cpp",
     "llvm/lib/Support/BinaryStreamRef.cpp",
-- 
2.26.3


From 4c2d9141f49181d403ed567f6e9bf01e9bae527f Mon Sep 17 00:00:00 2001
From: Marcus Comstedt <marcus@mc.pp.se>
Date: Sun, 14 Feb 2021 20:52:18 +0100
Subject: [PATCH 2/2] Implement support for ppc64 ELFv1

This commit adds Yarn support for powerpc64 machines
using the ELFv1 ABI. The changes have been tested on
a POWER9 machine running in Big Endian mode and all
unit tests pass.
---
 .../third_party/marl/src/osfiber_asm_ppc64.S       | 12 ++++++++++++
 .../third_party/marl/src/osfiber_asm_ppc64.h       |  5 -----
 .../third_party/marl/src/osfiber_ppc64.c           | 14 ++++++++++++--
 3 files changed, 24 insertions(+), 7 deletions(-)

diff --git a/third_party/swiftshader/third_party/marl/src/osfiber_asm_ppc64.S b/third_party/swiftshader/third_party/marl/src/osfiber_asm_ppc64.S
index afc143dd76..6c0ba5ae2b 100644
--- a/third_party/swiftshader/third_party/marl/src/osfiber_asm_ppc64.S
+++ b/third_party/swiftshader/third_party/marl/src/osfiber_asm_ppc64.S
@@ -23,8 +23,20 @@
 .text
 .global marl_fiber_swap
 .align 4
+#if !defined(_CALL_ELF) || (_CALL_ELF != 2)
+.global .marl_fiber_swap
+.pushsection ".opd","aw"
+marl_fiber_swap:
+.quad .marl_fiber_swap
+.quad .TOC.@tocbase
+.quad 0
+.popsection
+.type .marl_fiber_swap,@function
+.marl_fiber_swap:
+#else
 .type marl_fiber_swap @function
 marl_fiber_swap:
+#endif
 
     // Store non-volatile registers
     std 1, MARL_REG_R1(3)
diff --git a/third_party/swiftshader/third_party/marl/src/osfiber_asm_ppc64.h b/third_party/swiftshader/third_party/marl/src/osfiber_asm_ppc64.h
index 402bece9f1..f4d20a9e52 100644
--- a/third_party/swiftshader/third_party/marl/src/osfiber_asm_ppc64.h
+++ b/third_party/swiftshader/third_party/marl/src/osfiber_asm_ppc64.h
@@ -123,11 +123,6 @@ struct marl_fiber_context {
   uintptr_t vmx[12 * 2];
 };
 
-// Only the ELFv2 ABI is supported for now.
-#if !defined(_CALL_ELF) || (_CALL_ELF != 2)
-#error "Only the ppc64 ELFv2 ABI is supported."
-#endif
-
 #ifdef __cplusplus
 #include <cstddef>
 static_assert(offsetof(marl_fiber_context, r1) == MARL_REG_R1,
diff --git a/third_party/swiftshader/third_party/marl/src/osfiber_ppc64.c b/third_party/swiftshader/third_party/marl/src/osfiber_ppc64.c
index c325d7de07..48c4d9af90 100644
--- a/third_party/swiftshader/third_party/marl/src/osfiber_ppc64.c
+++ b/third_party/swiftshader/third_party/marl/src/osfiber_ppc64.c
@@ -29,19 +29,29 @@ void marl_fiber_set_target(struct marl_fiber_context* ctx,
                            uint32_t stack_size,
                            void (*target)(void*),
                            void* arg) {
-  uintptr_t stack_top = (uintptr_t)((uint8_t*)(stack) + stack_size);
+  uintptr_t stack_top = (uintptr_t)((uint8_t*)(stack) + stack_size - sizeof(uintptr_t));
   if ((stack_top % 16) != 0) {
     stack_top -= (stack_top % 16);
   }
 
-  // Write a backchain and subtract a minimum stack frame size (32)
+  // Write a backchain and subtract a minimum stack frame size (32/48)
   *(uintptr_t*)stack_top = 0;
+#if !defined(_CALL_ELF) || (_CALL_ELF != 2)
+  stack_top -= 48;
+  *(uintptr_t*)stack_top = stack_top + 48;
+#else
   stack_top -= 32;
   *(uintptr_t*)stack_top = stack_top + 32;
+#endif
 
   // Load registers
   ctx->r1 = stack_top;
+#if !defined(_CALL_ELF) || (_CALL_ELF != 2)
+  ctx->lr = ((const uintptr_t *)marl_fiber_trampoline)[0];
+  ctx->r2 = ((const uintptr_t *)marl_fiber_trampoline)[1];
+#else
   ctx->lr = (uintptr_t)marl_fiber_trampoline;
+#endif
   ctx->r3 = (uintptr_t)target;
   ctx->r4 = (uintptr_t)arg;
 
-- 
2.26.3

