From 78dad940f2a5c1456e95e007f77c25b353c3d132 Mon Sep 17 00:00:00 2001
From: Marcus Comstedt <marcus@mc.pp.se>
Date: Tue, 2 Oct 2018 23:53:33 +0200
Subject: [PATCH 1/3] protozero: Implement byte swap macros

---
 .../perfetto/src/protozero/proto_decoder.cc           | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/src/3rdparty/chromium/third_party/perfetto/src/protozero/proto_decoder.cc b/src/3rdparty/chromium/third_party/perfetto/src/protozero/proto_decoder.cc
index b606818a5..926af8282 100644
--- a/src/3rdparty/chromium/third_party/perfetto/src/protozero/proto_decoder.cc
+++ b/src/3rdparty/chromium/third_party/perfetto/src/protozero/proto_decoder.cc
@@ -28,7 +28,11 @@ namespace protozero {
 using namespace proto_utils;
 
 #if __BYTE_ORDER__ != __ORDER_LITTLE_ENDIAN__
-#error Unimplemented for big endian archs.
+#define BYTE_SWAP_TO_LE32(x) __builtin_bswap32(x)
+#define BYTE_SWAP_TO_LE64(x) __builtin_bswap64(x)
+#else
+#define BYTE_SWAP_TO_LE32(x) (x)
+#define BYTE_SWAP_TO_LE64(x) (x)
 #endif
 
 namespace {
@@ -113,6 +117,7 @@ ParseOneField(const uint8_t* const buffer, const uint8_t* const end) {
       if (PERFETTO_UNLIKELY(new_pos > end))
         return res;
       memcpy(&int_value, pos, sizeof(uint64_t));
+      int_value = BYTE_SWAP_TO_LE64(int_value);
       break;
     }
 
@@ -120,7 +125,9 @@ ParseOneField(const uint8_t* const buffer, const uint8_t* const end) {
       new_pos = pos + sizeof(uint32_t);
       if (PERFETTO_UNLIKELY(new_pos > end))
         return res;
-      memcpy(&int_value, pos, sizeof(uint32_t));
+      uint32_t tmp;
+      memcpy(&tmp, pos, sizeof(uint32_t));
+      int_value = BYTE_SWAP_TO_LE32(tmp);
       break;
     }
 
-- 
2.26.2


From 8b2e883abd92319e6d4dcf9d2275965e9be65e4a Mon Sep 17 00:00:00 2001
From: Marcus Comstedt <marcus@mc.pp.se>
Date: Sat, 23 Feb 2019 17:38:21 +0100
Subject: [PATCH 2/3] protozero: Swap "fixed" types

---
 .../perfetto/include/perfetto/protozero/message.h          | 7 +++++++
 .../chromium/third_party/perfetto/src/protozero/message.cc | 6 ------
 2 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/src/3rdparty/chromium/third_party/perfetto/include/perfetto/protozero/message.h b/src/3rdparty/chromium/third_party/perfetto/include/perfetto/protozero/message.h
index b53dcda3c..ade415116 100644
--- a/src/3rdparty/chromium/third_party/perfetto/include/perfetto/protozero/message.h
+++ b/src/3rdparty/chromium/third_party/perfetto/include/perfetto/protozero/message.h
@@ -137,6 +137,13 @@ class PERFETTO_EXPORT Message {
 
     pos = proto_utils::WriteVarInt(proto_utils::MakeTagFixed<T>(field_id), pos);
     memcpy(pos, &value, sizeof(T));
+#if __BYTE_ORDER__ != __ORDER_LITTLE_ENDIAN__
+    for (size_t i = sizeof(T)/2; i--; ) {
+      uint8_t tmp = pos[i];
+      pos[i] = pos[sizeof(T)-1-i];
+      pos[sizeof(T)-1-i] = tmp;
+    }
+#endif
     pos += sizeof(T);
     // TODO: Optimize memcpy performance, see http://crbug.com/624311 .
     WriteToStream(buffer, pos);
diff --git a/src/3rdparty/chromium/third_party/perfetto/src/protozero/message.cc b/src/3rdparty/chromium/third_party/perfetto/src/protozero/message.cc
index 419f7f143..1a605040b 100644
--- a/src/3rdparty/chromium/third_party/perfetto/src/protozero/message.cc
+++ b/src/3rdparty/chromium/third_party/perfetto/src/protozero/message.cc
@@ -22,12 +22,6 @@
 #include "perfetto/base/logging.h"
 #include "perfetto/protozero/message_handle.h"
 
-#if __BYTE_ORDER__ != __ORDER_LITTLE_ENDIAN__
-// The memcpy() for float and double below needs to be adjusted if we want to
-// support big endian CPUs. There doesn't seem to be a compelling need today.
-#error Unimplemented for big endian archs.
-#endif
-
 namespace protozero {
 
 namespace {
-- 
2.26.2


From 85d97337a52eea1a95a0c1891692859ef96a1743 Mon Sep 17 00:00:00 2001
From: Marcus Comstedt <marcus@mc.pp.se>
Date: Sat, 23 Feb 2019 17:39:49 +0100
Subject: [PATCH 3/3] Prevent AssumeLittleEndian template from asserting when
 not instantiated

---
 .../perfetto/include/perfetto/ext/base/utils.h      |  3 ++-
 .../third_party/perfetto/src/protozero/field.cc     | 13 ++++++++-----
 2 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/src/3rdparty/chromium/third_party/perfetto/include/perfetto/ext/base/utils.h b/src/3rdparty/chromium/third_party/perfetto/include/perfetto/ext/base/utils.h
index 9ec43ad44..06485d6b0 100644
--- a/src/3rdparty/chromium/third_party/perfetto/include/perfetto/ext/base/utils.h
+++ b/src/3rdparty/chromium/third_party/perfetto/include/perfetto/ext/base/utils.h
@@ -23,6 +23,7 @@
 #include <errno.h>
 #include <stddef.h>
 #include <stdlib.h>
+#include <type_traits>
 #if !PERFETTO_BUILDFLAG(PERFETTO_OS_WIN)
 #include <sys/types.h>
 #endif
@@ -72,7 +73,7 @@ struct FreeDeleter {
 
 template <typename T>
 constexpr T AssumeLittleEndian(T value) {
-  static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
+  static_assert(std::is_same<T,T>::value && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                 "Unimplemented on big-endian archs");
   return value;
 }
diff --git a/src/3rdparty/chromium/third_party/perfetto/src/protozero/field.cc b/src/3rdparty/chromium/third_party/perfetto/src/protozero/field.cc
index c92f7cee9..c4d27cb52 100644
--- a/src/3rdparty/chromium/third_party/perfetto/src/protozero/field.cc
+++ b/src/3rdparty/chromium/third_party/perfetto/src/protozero/field.cc
@@ -19,9 +19,11 @@
 #include "perfetto/base/logging.h"
 
 #if __BYTE_ORDER__ != __ORDER_LITTLE_ENDIAN__
-// The memcpy() for fixed32/64 below needs to be adjusted if we want to
-// support big endian CPUs. There doesn't seem to be a compelling need today.
-#error Unimplemented for big endian archs.
+#define BYTE_SWAP_TO_LE32(x) __builtin_bswap32(x)
+#define BYTE_SWAP_TO_LE64(x) __builtin_bswap64(x)
+#else
+#define BYTE_SWAP_TO_LE32(x) (x)
+#define BYTE_SWAP_TO_LE64(x) (x)
 #endif
 
 namespace protozero {
@@ -40,14 +42,15 @@ void Field::SerializeAndAppendTo(std::string* dst) {
     }
     case static_cast<int>(pu::ProtoWireType::kFixed32): {
       wptr = pu::WriteVarInt(pu::MakeTagFixed<uint32_t>(id_), wptr);
-      uint32_t value32 = static_cast<uint32_t>(int_value_);
+      uint32_t value32 = BYTE_SWAP_TO_LE32(static_cast<uint32_t>(int_value_));
       memcpy(wptr, &value32, sizeof(value32));
       wptr += sizeof(uint32_t);
       break;
     }
     case static_cast<int>(pu::ProtoWireType::kFixed64): {
       wptr = pu::WriteVarInt(pu::MakeTagFixed<uint64_t>(id_), wptr);
-      memcpy(wptr, &int_value_, sizeof(int_value_));
+      uint64_t value64 = BYTE_SWAP_TO_LE64(static_cast<uint64_t>(int_value_));
+      memcpy(wptr, &value64, sizeof(value64));
       wptr += sizeof(uint64_t);
       break;
     }
-- 
2.26.2

