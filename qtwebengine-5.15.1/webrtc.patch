From a4bfa0a80a171cfe8791d9836fc016acd0948915 Mon Sep 17 00:00:00 2001
From: Marcus Comstedt <marcus@mc.pp.se>
Date: Tue, 2 Oct 2018 23:51:07 +0200
Subject: [PATCH 1/2] wav: Implement be-to-le functions

---
 .../webrtc/common_audio/wav_header.cc         | 21 ++++++++++++++++++-
 1 file changed, 20 insertions(+), 1 deletion(-)

diff --git a/src/3rdparty/chromium/third_party/webrtc/common_audio/wav_header.cc b/src/3rdparty/chromium/third_party/webrtc/common_audio/wav_header.cc
index 15eb1f844..ce32cb344 100644
--- a/src/3rdparty/chromium/third_party/webrtc/common_audio/wav_header.cc
+++ b/src/3rdparty/chromium/third_party/webrtc/common_audio/wav_header.cc
@@ -86,7 +86,26 @@ static inline std::string ReadFourCC(uint32_t x) {
   return std::string(reinterpret_cast<char*>(&x), 4);
 }
 #else
-#error "Write be-to-le conversion functions"
+static inline void WriteLE16(uint16_t* f, uint16_t x) {
+  *f = __builtin_bswap16(x);
+}
+static inline void WriteLE32(uint32_t* f, uint32_t x) {
+  *f = __builtin_bswap32(x);
+}
+static inline void WriteFourCC(uint32_t* f, char a, char b, char c, char d) {
+  *f = static_cast<uint32_t>(d) | static_cast<uint32_t>(c) << 8 |
+       static_cast<uint32_t>(b) << 16 | static_cast<uint32_t>(a) << 24;
+}
+
+static inline uint16_t ReadLE16(uint16_t x) {
+  return __builtin_bswap16(x);
+}
+static inline uint32_t ReadLE32(uint32_t x) {
+  return __builtin_bswap32(x);
+}
+static inline std::string ReadFourCC(uint32_t x) {
+  return std::string(reinterpret_cast<char*>(&x), 4);
+}
 #endif
 
 static inline uint32_t RiffChunkSize(size_t bytes_in_payload) {
-- 
2.26.2


From 96ec25c115a7edb2c35ce7cf8809b6254895dc03 Mon Sep 17 00:00:00 2001
From: Marcus Comstedt <marcus@mc.pp.se>
Date: Sun, 24 Feb 2019 00:00:35 +0100
Subject: [PATCH 2/2] wav: Implement sample swapping

---
 .../webrtc/common_audio/wav_file.cc           | 23 +++++++++++++++----
 1 file changed, 18 insertions(+), 5 deletions(-)

diff --git a/src/3rdparty/chromium/third_party/webrtc/common_audio/wav_file.cc b/src/3rdparty/chromium/third_party/webrtc/common_audio/wav_file.cc
index 30968c25c..f95172bec 100644
--- a/src/3rdparty/chromium/third_party/webrtc/common_audio/wav_file.cc
+++ b/src/3rdparty/chromium/third_party/webrtc/common_audio/wav_file.cc
@@ -99,9 +99,6 @@ size_t WavReader::num_samples() const {
 }
 
 size_t WavReader::ReadSamples(size_t num_samples, int16_t* samples) {
-#ifndef WEBRTC_ARCH_LITTLE_ENDIAN
-#error "Need to convert samples to big-endian when reading from WAV file"
-#endif
   // There could be metadata after the audio; ensure we don't read it.
   num_samples = std::min(num_samples, num_samples_remaining_);
   const size_t num_bytes = num_samples * sizeof(*samples);
@@ -111,6 +108,11 @@ size_t WavReader::ReadSamples(size_t num_samples, int16_t* samples) {
   RTC_CHECK_EQ(read_bytes % 2, 0)
       << "End of file in the middle of a 16-bit sample";
   const size_t read_samples = read_bytes / 2;
+#ifndef WEBRTC_ARCH_LITTLE_ENDIAN
+  for (size_t i = 0; i < read_samples; i++) {
+      samples[i] = __builtin_bswap16(samples[i]);
+  }
+#endif
   RTC_CHECK_LE(read_samples, num_samples_remaining_);
   num_samples_remaining_ -= read_samples;
   return read_samples;
@@ -178,11 +180,22 @@ size_t WavWriter::num_samples() const {
 
 void WavWriter::WriteSamples(const int16_t* samples, size_t num_samples) {
 #ifndef WEBRTC_ARCH_LITTLE_ENDIAN
-#error "Need to convert samples to little-endian when writing to WAV file"
-#endif
+  static const size_t kChunksize = 4096 / sizeof(uint16_t);
+  for (size_t i = 0; i < num_samples; i += kChunksize) {
+    int16_t isamples[kChunksize];
+    const size_t chunk = std::min(kChunksize, num_samples - i);
+    for (size_t j = 0; j < chunk; j++) {
+      isamples[j] = __builtin_bswap16(samples[i + j]);
+    }
+    RTC_CHECK(file_.Write(isamples, sizeof(*isamples) * chunk));
+    num_samples_ += chunk;
+    RTC_CHECK(num_samples_ >= chunk);  // detect size_t overflow
+  }
+#else
   RTC_CHECK(file_.Write(samples, sizeof(*samples) * num_samples));
   num_samples_ += num_samples;
   RTC_CHECK(num_samples_ >= num_samples);  // detect size_t overflow
+#endif
 }
 
 void WavWriter::WriteSamples(const float* samples, size_t num_samples) {
-- 
2.26.2

